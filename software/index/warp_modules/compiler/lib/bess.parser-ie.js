/* Jison generated parser */
var bess = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"grammar":3,"declarations":4,"EOF":5,"declaration":6,".":7,"bessHiddenAssign":8,"cssRule":9,"bessIdentAny":10,"FUNCTION":11,"bessAssocOrFunc":12,"bessFunctionCall":13,"bessBody":14,"{":15,"}":16,"IDENT":17,"bessAfterIdent":18,":":19,"bessAssign":20,"bessArgumentsOptional":21,")":22,"bessFuncValueOrCss":23,"plainCssExprArgs":24,"cssBody":25,"cssExpr":26,";":27,"bessArguments":28,"bessArgument":29,"bessArgumentMore":30,",":31,"$":32,"bessVariable":33,"bessNamespaceIdent":34,"bessNamespaceResolver":35,"@":36,"bessFunctionNamespace":37,"W":38,"cssExprOptional":39,"bessFunctionNamespaceResolver":40,"bessFunctionNamespaceResolverOptional":41,"bessArithmetic":42,"(":43,"bessArithmeticTermOptional":44,"bessArithmeticTerm":45,"cssTerm":46,"bessArithmeticOperation":47,"bessArithmeticOperator":48,"-":49,"+":50,"*":51,"/":52,"%":53,"^":54,"|":55,"&":56,"selectorsGroup":57,"selectorTarget":58,"selectorsMore":59,"SELECTOR":60,"BESS_IDENT":61,"`":62,"embess":63,"embessVar":64,"embessMath":65,"embessNsi":66,"embessValue":67,"embessOperation":68,"embessOperator":69,"NUMBER":70,"cssDeclaration":71,"cssIdentAny":72,"cssAfterIdent":73,"plainCssExpr":74,"plainCssExprArgsMore":75,"plainCssTerm":76,"plainCssExprMore":77,"cssUnaryOperator":78,"cssUnit":79,"cssValue":80,"cssOperator":81,"S":82,"cssPriority":83,"IMPORTANT_SYM":84,"cssExprMore":85,"JAVASCRIPT":86,"PERCENTAGE":87,"LENGTH":88,"EMS":89,"EXS":90,"ANGLE":91,"TIME":92,"FREQ":93,"cssFunction":94,"STRING":95,"HASH":96,"identOptional":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:".",11:"FUNCTION",15:"{",16:"}",17:"IDENT",19:":",22:")",27:";",31:",",32:"$",36:"@",43:"(",49:"-",50:"+",51:"*",52:"/",53:"%",54:"^",55:"|",56:"&",60:"SELECTOR",61:"BESS_IDENT",62:"`",70:"NUMBER",82:"S",84:"IMPORTANT_SYM",86:"JAVASCRIPT",87:"PERCENTAGE",88:"LENGTH",89:"EMS",90:"EXS",91:"ANGLE",92:"TIME",93:"FREQ",95:"STRING",96:"HASH"},
productions_: [0,[3,2],[4,1],[4,0],[6,3],[6,2],[6,2],[6,3],[6,3],[14,3],[8,1],[10,2],[18,2],[18,1],[18,1],[12,3],[12,4],[23,3],[23,2],[20,2],[21,1],[21,0],[28,2],[30,2],[30,0],[29,2],[33,2],[34,3],[35,3],[35,0],[13,5],[37,1],[37,2],[40,3],[41,1],[41,0],[42,3],[44,1],[44,0],[45,2],[47,2],[47,0],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[57,3],[59,1],[59,0],[58,1],[58,1],[58,3],[63,2],[63,2],[63,0],[64,3],[66,3],[66,0],[65,4],[68,3],[68,0],[67,1],[67,1],[67,1],[69,1],[69,1],[69,1],[69,1],[9,6],[25,3],[25,1],[71,1],[71,1],[71,2],[72,3],[73,4],[73,1],[24,2],[75,3],[75,0],[74,3],[77,1],[77,0],[76,2],[76,1],[76,1],[81,2],[81,2],[81,2],[81,2],[81,1],[78,1],[83,1],[39,1],[39,0],[26,2],[85,2],[85,1],[85,0],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[80,1],[80,1],[80,1],[94,4],[38,2],[38,0],[97,1],[97,0]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
			var scopeRoot = {};
			var cssSheet = [];
			var jsol = {};
			scopeRoot['^'] = false;
			var decls = $$[$0-1];

			// console.log(JSOL.stringify(decls,null,'\t'));

			for(var i=decls.length-1; i>=0; i--) {
				expandDeclaration( decls[i], scopeRoot, jsol, cssSheet );
			}

			return {
				css: cssSheet.join('\n'),
				js: JSOL.stringify(jsol, null, '\t'),
			};
		
break;
case 3:
			this.$ = [];
		
break;
case 4:
			this.$ = $$[$0];
			this.$.push(bessHiddenRule);
		
break;
case 5:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 6:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 7:
			this.$ = $$[$0];
			this.$.push(
				__($$[$0-1], {
					varName: $$[$0-2].substr(0,$$[$0-2].length-1),
				})
			);
		
break;
case 8:
			this.$ = $$[$0];
			this.$.push(
				{
					isRuledCall: true,
					bess: $$[$0-2],
					css: $$[$0-1],
				}
			);
		
break;
case 9:
			this.$ = {
				body: $$[$0-1],
			};
		
break;
case 10:
			this.$ = __($$[$0], {
				isTransparent: true,
			});
		
break;
case 11:
			this.$ = __($$[$0], {
				varName: $$[$0-1],
			});
		
break;
case 12:
			this.$ = __($$[$0], {
				isAssignment: true,
			});
		
break;
case 15:
			this.$ = __($$[$0], {
				arguments: $$[$0-2],
			});
		
break;
case 16:
			this.$ = {
				isDictionary: true,
				arguments: $$[$0-3],
				bess: $$[$0],
			};
		
break;
case 17:
			this.$ = __($$[$0-1], {
				isFunction: true,
			});
		
break;
case 18:
			this.$ = __($$[$0], {
				isValueFunction: true,
			});
		
break;
case 19:
			this.$ = {
				gets: $$[$0-1],
			};
		
break;
case 21:
			this.$ = false;
		
break;
case 22:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 23:
			this.$ = $$[$0];
		
break;
case 24:
			this.$ = [];
		
break;
case 25:
			this.$ = '$' + $$[$0];
		
break;
case 26:
			this.$ = {
				isVar: true,
				varName: [ $$[$0] ],
			};
		
break;
case 27:
			this.$ = $$[$0];

			this.$.push($$[$0-1]);
			this.$ = {
				isVar: true,
				varName: this.$,
			};
	 	
break;
case 28:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 29:
			this.$ = [];
		
break;
case 30:
			this.$ = {
				isBessCall: true,
				method: $$[$0-3],
				args: $$[$0-1],
			};
		
break;
case 31:
			this.$ = [ $$[$0].substr(0, $$[$0].length-1) ];
		
break;
case 32:
			this.$ = $$[$0-1];
			this.$.unshift($$[$0].substr(0, $$[$0].length-1));
		
break;
case 33:
			this.$ = $$[$0];
			this.$.push($$[$0-2]);
		
break;
case 35:
			this.$ = [];
		
break;
case 36:
			this.$ = {
				isArithmetic: true,
				term: $$[$0-1],
			};
		
break;
case 38:
			this.$ = {};
		
break;
case 39:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 40:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 41:
			this.$ = [];
		
break;
case 51:
			this.$ = $$[$0];
			if($$[$0-1] && $$[$0-1].length && this.$.length) this.$.push($$[$0-1]);
			this.$.push($$[$0-2]);
		
break;
case 53:
			this.$ = [];
		
break;
case 55:
			this.$ = {
				isVar: true,
				varName: [$$[$0].substr(1)],
			};
		
break;
case 56:
			this.$ = $$[$0-1];
		
break;
case 57:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 59:
			this.$ = [];
			this.$.isEmbess = true;
		
break;
case 60:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
			this.$ = {
				isVar: true,
				varName: this.$,
			};
		
break;
case 61:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 62:
			this.$ = [];
		
break;
case 63:
			this.$ = $$[$0-1];
			this.$.push($$[$0-2]);
			this.$.isMath = true;
		
break;
case 64:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
			this.$.push($$[$0-2]);
		
break;
case 65:
			this.$ = [];
		
break;
case 73:
			this.$ = {
				isRule: true,
				selectors: $$[$0-3],
				css: $$[$0-1],
			};
		
break;
case 74:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 75:
			this.$ = [];
		
break;
case 78:
			this.$ = $$[$0-1];
		
break;
case 79:
			this.$ = $$[$0];
			if($$[$0].css) {
				this.$.varName = $$[$0-2];
			}
			else {
				this.$.prop = $$[$0-2];
			}
		
break;
case 80:
			this.$ ={
				value: $$[$0-1],
			};
		
break;
case 81:
			this.$ = $$[$0];
		
break;
case 82:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 83:
			this.$ = [ plainCssExpr ];
		
break;
case 84:
			this.$ = [];
		
break;
case 85:
			this.$ = $$[$0];
			this.$.push($$[$0-2]);
		
break;
case 87:
			this.$ = [];
		
break;
case 88:
			this.$ = $$[$0-1] + $$[$0];
		
break;
case 90:
			this.$ = $$[$0];
		
break;
case 99:
			this.$ = false;
		
break;
case 100:
			this.$ = $$[$0];
			this.$.push($$[$0-1]);
		
break;
case 101:
			this.$ = $$[$0];
			var term = this.$.pop();
			this.$.push(term);
			if($$[$0-1] != ' ') {
				this.$.push($$[$0-1]);
			}
		
break;
case 103:
			this.$ = [];
		
break;
case 104:
			this.$ = $$[$0-1] + $$[$0];
		
break;
case 121:
			this.$ = {
				isStr: true,
				value: strip($$[$0]),
			};
		
break;
case 124:
			this.$ = {
				isCall: true,
				method: $$[$0-3],
				args: $$[$0-1],
			};
		
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,17:[1,10],36:[1,11],52:[1,9]},{1:[3]},{5:[1,12]},{5:[2,2],16:[2,2]},{8:13,10:14,17:[1,10]},{4:15,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{4:16,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{11:[1,41],12:17,17:[1,39],21:18,22:[2,21],24:19,28:20,29:22,32:[1,24],49:[1,28],70:[1,29],74:21,76:23,78:25,79:26,80:27,87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{9:42,52:[1,9]},{38:43,60:[2,126],61:[2,126],62:[2,126],82:[1,44]},{9:47,14:48,15:[1,49],18:45,19:[1,46],52:[1,9]},{11:[1,51],17:[1,53],37:50,40:52},{1:[2,1]},{4:54,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{5:[2,10],7:[2,10],11:[2,10],16:[2,10],17:[2,10],36:[2,10],52:[2,10]},{5:[2,5],16:[2,5]},{5:[2,6],16:[2,6]},{4:55,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{22:[1,56]},{22:[1,57]},{22:[2,20]},{22:[2,84],31:[1,59],75:58},{22:[2,24],30:60,31:[1,61]},{11:[2,126],17:[2,126],22:[2,126],31:[2,126],38:62,49:[2,126],70:[2,126],82:[1,44],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{17:[1,63]},{11:[1,41],70:[1,29],79:64,87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37},{11:[2,89],17:[2,89],22:[2,89],31:[2,89],49:[2,89],70:[2,89],82:[2,89],87:[2,89],88:[2,89],89:[2,89],90:[2,89],91:[2,89],92:[2,89],93:[2,89],95:[2,89],96:[2,89]},{11:[2,90],17:[2,90],22:[2,90],31:[2,90],49:[2,90],70:[2,90],82:[2,90],87:[2,90],88:[2,90],89:[2,90],90:[2,90],91:[2,90],92:[2,90],93:[2,90],95:[2,90],96:[2,90]},{11:[2,96],70:[2,96],87:[2,96],88:[2,96],89:[2,96],90:[2,96],91:[2,96],92:[2,96],93:[2,96]},{11:[2,112],17:[2,112],19:[2,112],22:[2,112],27:[2,112],31:[2,112],32:[2,112],36:[2,112],43:[2,112],49:[2,112],50:[2,112],51:[2,112],52:[2,112],53:[2,112],54:[2,112],55:[2,112],56:[2,112],70:[2,112],82:[2,112],84:[2,112],86:[2,112],87:[2,112],88:[2,112],89:[2,112],90:[2,112],91:[2,112],92:[2,112],93:[2,112],95:[2,112],96:[2,112]},{11:[2,113],17:[2,113],19:[2,113],22:[2,113],27:[2,113],31:[2,113],32:[2,113],36:[2,113],43:[2,113],49:[2,113],50:[2,113],51:[2,113],52:[2,113],53:[2,113],54:[2,113],55:[2,113],56:[2,113],70:[2,113],82:[2,113],84:[2,113],86:[2,113],87:[2,113],88:[2,113],89:[2,113],90:[2,113],91:[2,113],92:[2,113],93:[2,113],95:[2,113],96:[2,113]},{11:[2,114],17:[2,114],19:[2,114],22:[2,114],27:[2,114],31:[2,114],32:[2,114],36:[2,114],43:[2,114],49:[2,114],50:[2,114],51:[2,114],52:[2,114],53:[2,114],54:[2,114],55:[2,114],56:[2,114],70:[2,114],82:[2,114],84:[2,114],86:[2,114],87:[2,114],88:[2,114],89:[2,114],90:[2,114],91:[2,114],92:[2,114],93:[2,114],95:[2,114],96:[2,114]},{11:[2,115],17:[2,115],19:[2,115],22:[2,115],27:[2,115],31:[2,115],32:[2,115],36:[2,115],43:[2,115],49:[2,115],50:[2,115],51:[2,115],52:[2,115],53:[2,115],54:[2,115],55:[2,115],56:[2,115],70:[2,115],82:[2,115],84:[2,115],86:[2,115],87:[2,115],88:[2,115],89:[2,115],90:[2,115],91:[2,115],92:[2,115],93:[2,115],95:[2,115],96:[2,115]},{11:[2,116],17:[2,116],19:[2,116],22:[2,116],27:[2,116],31:[2,116],32:[2,116],36:[2,116],43:[2,116],49:[2,116],50:[2,116],51:[2,116],52:[2,116],53:[2,116],54:[2,116],55:[2,116],56:[2,116],70:[2,116],82:[2,116],84:[2,116],86:[2,116],87:[2,116],88:[2,116],89:[2,116],90:[2,116],91:[2,116],92:[2,116],93:[2,116],95:[2,116],96:[2,116]},{11:[2,117],17:[2,117],19:[2,117],22:[2,117],27:[2,117],31:[2,117],32:[2,117],36:[2,117],43:[2,117],49:[2,117],50:[2,117],51:[2,117],52:[2,117],53:[2,117],54:[2,117],55:[2,117],56:[2,117],70:[2,117],82:[2,117],84:[2,117],86:[2,117],87:[2,117],88:[2,117],89:[2,117],90:[2,117],91:[2,117],92:[2,117],93:[2,117],95:[2,117],96:[2,117]},{11:[2,118],17:[2,118],19:[2,118],22:[2,118],27:[2,118],31:[2,118],32:[2,118],36:[2,118],43:[2,118],49:[2,118],50:[2,118],51:[2,118],52:[2,118],53:[2,118],54:[2,118],55:[2,118],56:[2,118],70:[2,118],82:[2,118],84:[2,118],86:[2,118],87:[2,118],88:[2,118],89:[2,118],90:[2,118],91:[2,118],92:[2,118],93:[2,118],95:[2,118],96:[2,118]},{11:[2,119],17:[2,119],19:[2,119],22:[2,119],27:[2,119],31:[2,119],32:[2,119],36:[2,119],43:[2,119],49:[2,119],50:[2,119],51:[2,119],52:[2,119],53:[2,119],54:[2,119],55:[2,119],56:[2,119],70:[2,119],82:[2,119],84:[2,119],86:[2,119],87:[2,119],88:[2,119],89:[2,119],90:[2,119],91:[2,119],92:[2,119],93:[2,119],95:[2,119],96:[2,119]},{11:[2,120],17:[2,120],19:[2,120],22:[2,120],27:[2,120],31:[2,120],32:[2,120],36:[2,120],43:[2,120],49:[2,120],50:[2,120],51:[2,120],52:[2,120],53:[2,120],54:[2,120],55:[2,120],56:[2,120],70:[2,120],82:[2,120],84:[2,120],86:[2,120],87:[2,120],88:[2,120],89:[2,120],90:[2,120],91:[2,120],92:[2,120],93:[2,120],95:[2,120],96:[2,120]},{11:[2,121],17:[2,121],19:[2,121],22:[2,121],27:[2,121],31:[2,121],32:[2,121],36:[2,121],43:[2,121],49:[2,121],50:[2,121],51:[2,121],52:[2,121],53:[2,121],54:[2,121],55:[2,121],56:[2,121],70:[2,121],82:[2,121],84:[2,121],86:[2,121],87:[2,121],88:[2,121],89:[2,121],90:[2,121],91:[2,121],92:[2,121],93:[2,121],95:[2,121],96:[2,121]},{11:[2,122],17:[2,122],19:[2,122],22:[2,122],27:[2,122],31:[2,122],32:[2,122],36:[2,122],43:[2,122],49:[2,122],50:[2,122],51:[2,122],52:[2,122],53:[2,122],54:[2,122],55:[2,122],56:[2,122],70:[2,122],82:[2,122],84:[2,122],86:[2,122],87:[2,122],88:[2,122],89:[2,122],90:[2,122],91:[2,122],92:[2,122],93:[2,122],95:[2,122],96:[2,122]},{11:[2,123],17:[2,123],19:[2,123],22:[2,123],27:[2,123],31:[2,123],32:[2,123],36:[2,123],43:[2,123],49:[2,123],50:[2,123],51:[2,123],52:[2,123],53:[2,123],54:[2,123],55:[2,123],56:[2,123],70:[2,123],82:[2,123],84:[2,123],86:[2,123],87:[2,123],88:[2,123],89:[2,123],90:[2,123],91:[2,123],92:[2,123],93:[2,123],95:[2,123],96:[2,123]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:65,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{4:66,5:[2,3],6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{57:67,58:68,60:[1,69],61:[1,70],62:[1,71]},{11:[2,126],15:[2,126],16:[2,126],17:[2,126],19:[2,126],22:[2,126],31:[2,126],32:[2,126],36:[2,126],38:72,43:[2,126],49:[2,126],52:[2,126],60:[2,126],61:[2,126],62:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{5:[2,11],7:[2,11],11:[2,11],16:[2,11],17:[2,11],36:[2,11],52:[2,11]},{11:[1,41],13:80,17:[1,39],20:73,26:74,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{5:[2,13],7:[2,13],11:[2,13],16:[2,13],17:[2,13],36:[2,13],52:[2,13]},{5:[2,14],7:[2,14],11:[2,14],16:[2,14],17:[2,14],36:[2,14],52:[2,14]},{4:87,6:3,7:[1,4],9:5,10:6,11:[1,7],13:8,16:[2,3],17:[1,10],36:[1,11],52:[1,9]},{11:[2,126],17:[2,126],22:[2,126],32:[2,126],36:[2,126],38:88,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{11:[2,31],17:[2,31],22:[2,31],32:[2,31],36:[2,31],43:[2,31],49:[2,31],70:[2,31],82:[2,31],84:[2,31],86:[2,31],87:[2,31],88:[2,31],89:[2,31],90:[2,31],91:[2,31],92:[2,31],93:[2,31],95:[2,31],96:[2,31]},{11:[1,89]},{7:[1,90]},{5:[2,4],16:[2,4]},{5:[2,7],16:[2,7]},{15:[1,92],19:[1,93],23:91},{19:[1,94]},{22:[2,82]},{11:[2,126],17:[2,126],38:95,49:[2,126],70:[2,126],82:[1,44],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{22:[2,22]},{28:96,29:22,32:[1,24]},{11:[1,41],17:[1,39],22:[2,87],31:[2,87],49:[1,28],70:[1,29],74:98,76:23,77:97,78:25,79:26,80:27,87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{22:[2,25],31:[2,25]},{11:[2,88],17:[2,88],22:[2,88],31:[2,88],49:[2,88],70:[2,88],82:[2,88],87:[2,88],88:[2,88],89:[2,88],90:[2,88],91:[2,88],92:[2,88],93:[2,88],95:[2,88],96:[2,88]},{11:[1,41],13:80,17:[1,39],26:99,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{5:[2,8],16:[2,8]},{15:[1,100]},{15:[2,126],38:101,60:[2,126],61:[2,126],62:[2,126],82:[1,44]},{15:[2,54],60:[2,54],61:[2,54],62:[2,54],82:[2,54]},{15:[2,55],60:[2,55],61:[2,55],62:[2,55],82:[2,55]},{32:[1,105],43:[1,106],62:[2,59],63:102,64:103,65:104},{11:[2,125],15:[2,125],16:[2,125],17:[2,125],19:[2,125],22:[2,125],31:[2,125],32:[2,125],36:[2,125],43:[2,125],49:[2,125],52:[2,125],60:[2,125],61:[2,125],62:[2,125],70:[2,125],84:[2,125],86:[2,125],87:[2,125],88:[2,125],89:[2,125],90:[2,125],91:[2,125],92:[2,125],93:[2,125],95:[2,125],96:[2,125]},{5:[2,12],7:[2,12],11:[2,12],16:[2,12],17:[2,12],36:[2,12],52:[2,12]},{27:[1,107]},{11:[1,41],13:80,17:[1,39],22:[2,103],26:110,27:[2,103],31:[1,112],32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],50:[1,114],51:[1,113],52:[1,111],70:[1,29],78:76,79:77,80:78,81:109,82:[1,115],83:83,84:[1,86],85:108,86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[1,41],70:[1,29],79:116,87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37},{11:[2,105],17:[2,105],19:[2,105],22:[2,105],27:[2,105],31:[2,105],32:[2,105],36:[2,105],43:[2,105],49:[2,105],50:[2,105],51:[2,105],52:[2,105],53:[2,105],54:[2,105],55:[2,105],56:[2,105],70:[2,105],82:[2,105],84:[2,105],86:[2,105],87:[2,105],88:[2,105],89:[2,105],90:[2,105],91:[2,105],92:[2,105],93:[2,105],95:[2,105],96:[2,105]},{11:[2,106],17:[2,106],19:[2,106],22:[2,106],27:[2,106],31:[2,106],32:[2,106],36:[2,106],43:[2,106],49:[2,106],50:[2,106],51:[2,106],52:[2,106],53:[2,106],54:[2,106],55:[2,106],56:[2,106],70:[2,106],82:[2,106],84:[2,106],86:[2,106],87:[2,106],88:[2,106],89:[2,106],90:[2,106],91:[2,106],92:[2,106],93:[2,106],95:[2,106],96:[2,106]},{11:[2,107],17:[2,107],19:[2,107],22:[2,107],27:[2,107],31:[2,107],32:[2,107],36:[2,107],43:[2,107],49:[2,107],50:[2,107],51:[2,107],52:[2,107],53:[2,107],54:[2,107],55:[2,107],56:[2,107],70:[2,107],82:[2,107],84:[2,107],86:[2,107],87:[2,107],88:[2,107],89:[2,107],90:[2,107],91:[2,107],92:[2,107],93:[2,107],95:[2,107],96:[2,107]},{11:[2,108],17:[2,108],19:[2,108],22:[2,108],27:[2,108],31:[2,108],32:[2,108],36:[2,108],43:[2,108],49:[2,108],50:[2,108],51:[2,108],52:[2,108],53:[2,108],54:[2,108],55:[2,108],56:[2,108],70:[2,108],82:[2,108],84:[2,108],86:[2,108],87:[2,108],88:[2,108],89:[2,108],90:[2,108],91:[2,108],92:[2,108],93:[2,108],95:[2,108],96:[2,108]},{11:[2,109],17:[2,109],19:[2,109],22:[2,109],27:[2,109],31:[2,109],32:[2,109],36:[2,109],43:[2,109],49:[2,109],50:[2,109],51:[2,109],52:[2,109],53:[2,109],54:[2,109],55:[2,109],56:[2,109],70:[2,109],82:[2,109],84:[2,109],86:[2,109],87:[2,109],88:[2,109],89:[2,109],90:[2,109],91:[2,109],92:[2,109],93:[2,109],95:[2,109],96:[2,109]},{11:[2,110],17:[2,110],19:[2,110],22:[2,110],27:[2,110],31:[2,110],32:[2,110],36:[2,110],43:[2,110],49:[2,110],50:[2,110],51:[2,110],52:[2,110],53:[2,110],54:[2,110],55:[2,110],56:[2,110],70:[2,110],82:[2,110],84:[2,110],86:[2,110],87:[2,110],88:[2,110],89:[2,110],90:[2,110],91:[2,110],92:[2,110],93:[2,110],95:[2,110],96:[2,110]},{11:[2,111],17:[2,111],19:[2,111],22:[2,111],27:[2,111],31:[2,111],32:[2,111],36:[2,111],43:[2,111],49:[2,111],50:[2,111],51:[2,111],52:[2,111],53:[2,111],54:[2,111],55:[2,111],56:[2,111],70:[2,111],82:[2,111],84:[2,111],86:[2,111],87:[2,111],88:[2,111],89:[2,111],90:[2,111],91:[2,111],92:[2,111],93:[2,111],95:[2,111],96:[2,111]},{17:[1,117]},{11:[1,41],13:80,17:[1,39],22:[2,38],32:[1,84],34:79,36:[1,11],42:82,43:[1,85],44:118,45:119,46:120,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[2,97],17:[2,97],19:[2,97],22:[2,97],27:[2,97],31:[2,97],32:[2,97],36:[2,97],43:[2,97],49:[2,97],50:[2,97],51:[2,97],52:[2,97],53:[2,97],54:[2,97],55:[2,97],56:[2,97],70:[2,97],82:[2,97],84:[2,97],86:[2,97],87:[2,97],88:[2,97],89:[2,97],90:[2,97],91:[2,97],92:[2,97],93:[2,97],95:[2,97],96:[2,97]},{16:[1,121]},{11:[1,41],13:80,17:[1,39],22:[2,99],26:123,32:[1,84],34:79,36:[1,11],39:122,42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[2,32],17:[2,32],22:[2,32],32:[2,32],36:[2,32],43:[2,32],49:[2,32],70:[2,32],82:[2,32],84:[2,32],86:[2,32],87:[2,32],88:[2,32],89:[2,32],90:[2,32],91:[2,32],92:[2,32],93:[2,32],95:[2,32],96:[2,32]},{11:[2,35],17:[1,53],40:125,41:124},{5:[2,15],7:[2,15],11:[2,15],16:[2,15],17:[2,15],36:[2,15],52:[2,15]},{16:[2,126],17:[2,126],25:126,36:[2,126],38:127,52:[2,126],82:[1,44]},{11:[1,41],13:80,17:[1,39],20:128,26:74,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[1,41],13:80,17:[1,39],20:129,26:74,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[1,41],17:[1,39],24:130,49:[1,28],70:[1,29],74:21,76:23,78:25,79:26,80:27,87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{22:[2,23]},{22:[2,85],31:[2,85]},{22:[2,86],31:[2,86]},{22:[1,131]},{16:[2,126],17:[2,126],25:132,36:[2,126],38:127,52:[2,126],82:[1,44]},{15:[2,53],57:134,58:68,59:133,60:[1,69],61:[1,70],62:[1,71]},{62:[1,135]},{32:[1,105],43:[1,106],62:[2,59],63:136,64:103,65:104},{32:[1,105],43:[1,106],62:[2,59],63:137,64:103,65:104},{17:[1,138]},{32:[1,105],43:[1,106],64:141,65:142,67:139,70:[1,140]},{5:[2,19],7:[2,19],11:[2,19],16:[2,19],17:[2,19],36:[2,19],52:[2,19]},{22:[2,100],27:[2,100]},{11:[1,41],13:80,17:[1,39],26:143,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{22:[2,102],27:[2,102]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:144,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:145,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:146,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:147,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{11:[2,95],17:[2,95],32:[2,95],36:[2,95],43:[2,95],49:[2,95],70:[2,95],84:[2,95],86:[2,95],87:[2,95],88:[2,95],89:[2,95],90:[2,95],91:[2,95],92:[2,95],93:[2,95],95:[2,95],96:[2,95]},{11:[2,104],17:[2,104],19:[2,104],22:[2,104],27:[2,104],31:[2,104],32:[2,104],36:[2,104],43:[2,104],49:[2,104],50:[2,104],51:[2,104],52:[2,104],53:[2,104],54:[2,104],55:[2,104],56:[2,104],70:[2,104],82:[2,104],84:[2,104],86:[2,104],87:[2,104],88:[2,104],89:[2,104],90:[2,104],91:[2,104],92:[2,104],93:[2,104],95:[2,104],96:[2,104]},{7:[1,149],11:[2,29],17:[2,29],19:[2,29],22:[2,29],27:[2,29],31:[2,29],32:[2,29],35:148,36:[2,29],43:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],70:[2,29],82:[2,29],84:[2,29],86:[2,29],87:[2,29],88:[2,29],89:[2,29],90:[2,29],91:[2,29],92:[2,29],93:[2,29],95:[2,29],96:[2,29]},{22:[1,150]},{22:[2,37]},{19:[1,161],22:[2,41],47:151,48:152,49:[1,153],50:[1,154],51:[1,155],52:[1,156],53:[1,157],54:[1,158],55:[1,159],56:[1,160]},{5:[2,9],7:[2,9],11:[2,9],16:[2,9],17:[2,9],36:[2,9],52:[2,9]},{22:[1,162]},{22:[2,98]},{11:[2,33]},{11:[2,34]},{16:[1,163]},{9:166,13:167,16:[2,75],17:[1,168],36:[1,11],52:[1,9],71:164,72:165},{5:[2,18],7:[2,18],11:[2,18],16:[2,18],17:[2,18],36:[2,18],52:[2,18]},{5:[2,16],7:[2,16],11:[2,16],16:[2,16],17:[2,16],36:[2,16],52:[2,16]},{22:[2,83]},{11:[2,124],17:[2,124],19:[2,124],22:[2,124],27:[2,124],31:[2,124],32:[2,124],36:[2,124],43:[2,124],49:[2,124],50:[2,124],51:[2,124],52:[2,124],53:[2,124],54:[2,124],55:[2,124],56:[2,124],70:[2,124],82:[2,124],84:[2,124],86:[2,124],87:[2,124],88:[2,124],89:[2,124],90:[2,124],91:[2,124],92:[2,124],93:[2,124],95:[2,124],96:[2,124]},{16:[1,169]},{15:[2,51]},{15:[2,52]},{15:[2,56],60:[2,56],61:[2,56],62:[2,56],82:[2,56]},{62:[2,57]},{62:[2,58]},{7:[1,171],22:[2,62],32:[2,62],43:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],62:[2,62],66:170},{22:[2,65],49:[1,175],50:[1,174],51:[1,177],52:[1,176],68:172,69:173},{22:[2,66],49:[2,66],50:[2,66],51:[2,66],52:[2,66]},{22:[2,67],49:[2,67],50:[2,67],51:[2,67],52:[2,67]},{22:[2,68],49:[2,68],50:[2,68],51:[2,68],52:[2,68]},{22:[2,101],27:[2,101]},{11:[2,91],17:[2,91],32:[2,91],36:[2,91],43:[2,91],49:[2,91],70:[2,91],84:[2,91],86:[2,91],87:[2,91],88:[2,91],89:[2,91],90:[2,91],91:[2,91],92:[2,91],93:[2,91],95:[2,91],96:[2,91]},{11:[2,92],17:[2,92],32:[2,92],36:[2,92],43:[2,92],49:[2,92],70:[2,92],84:[2,92],86:[2,92],87:[2,92],88:[2,92],89:[2,92],90:[2,92],91:[2,92],92:[2,92],93:[2,92],95:[2,92],96:[2,92]},{11:[2,93],17:[2,93],32:[2,93],36:[2,93],43:[2,93],49:[2,93],70:[2,93],84:[2,93],86:[2,93],87:[2,93],88:[2,93],89:[2,93],90:[2,93],91:[2,93],92:[2,93],93:[2,93],95:[2,93],96:[2,93]},{11:[2,94],17:[2,94],32:[2,94],36:[2,94],43:[2,94],49:[2,94],70:[2,94],84:[2,94],86:[2,94],87:[2,94],88:[2,94],89:[2,94],90:[2,94],91:[2,94],92:[2,94],93:[2,94],95:[2,94],96:[2,94]},{11:[2,27],17:[2,27],19:[2,27],22:[2,27],27:[2,27],31:[2,27],32:[2,27],36:[2,27],43:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27],70:[2,27],82:[2,27],84:[2,27],86:[2,27],87:[2,27],88:[2,27],89:[2,27],90:[2,27],91:[2,27],92:[2,27],93:[2,27],95:[2,27],96:[2,27]},{17:[1,178]},{11:[2,36],17:[2,36],19:[2,36],22:[2,36],27:[2,36],31:[2,36],32:[2,36],36:[2,36],43:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],70:[2,36],82:[2,36],84:[2,36],86:[2,36],87:[2,36],88:[2,36],89:[2,36],90:[2,36],91:[2,36],92:[2,36],93:[2,36],95:[2,36],96:[2,36]},{22:[2,39]},{11:[1,41],13:80,17:[1,39],32:[1,84],34:79,36:[1,11],42:82,43:[1,85],45:179,46:120,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{11:[2,42],17:[2,42],32:[2,42],36:[2,42],43:[2,42],49:[2,42],70:[2,42],84:[2,42],86:[2,42],87:[2,42],88:[2,42],89:[2,42],90:[2,42],91:[2,42],92:[2,42],93:[2,42],95:[2,42],96:[2,42]},{11:[2,43],17:[2,43],32:[2,43],36:[2,43],43:[2,43],49:[2,43],70:[2,43],84:[2,43],86:[2,43],87:[2,43],88:[2,43],89:[2,43],90:[2,43],91:[2,43],92:[2,43],93:[2,43],95:[2,43],96:[2,43]},{11:[2,44],17:[2,44],32:[2,44],36:[2,44],43:[2,44],49:[2,44],70:[2,44],84:[2,44],86:[2,44],87:[2,44],88:[2,44],89:[2,44],90:[2,44],91:[2,44],92:[2,44],93:[2,44],95:[2,44],96:[2,44]},{11:[2,45],17:[2,45],32:[2,45],36:[2,45],43:[2,45],49:[2,45],70:[2,45],84:[2,45],86:[2,45],87:[2,45],88:[2,45],89:[2,45],90:[2,45],91:[2,45],92:[2,45],93:[2,45],95:[2,45],96:[2,45]},{11:[2,46],17:[2,46],32:[2,46],36:[2,46],43:[2,46],49:[2,46],70:[2,46],84:[2,46],86:[2,46],87:[2,46],88:[2,46],89:[2,46],90:[2,46],91:[2,46],92:[2,46],93:[2,46],95:[2,46],96:[2,46]},{11:[2,47],17:[2,47],32:[2,47],36:[2,47],43:[2,47],49:[2,47],70:[2,47],84:[2,47],86:[2,47],87:[2,47],88:[2,47],89:[2,47],90:[2,47],91:[2,47],92:[2,47],93:[2,47],95:[2,47],96:[2,47]},{11:[2,48],17:[2,48],32:[2,48],36:[2,48],43:[2,48],49:[2,48],70:[2,48],84:[2,48],86:[2,48],87:[2,48],88:[2,48],89:[2,48],90:[2,48],91:[2,48],92:[2,48],93:[2,48],95:[2,48],96:[2,48]},{11:[2,49],17:[2,49],32:[2,49],36:[2,49],43:[2,49],49:[2,49],70:[2,49],84:[2,49],86:[2,49],87:[2,49],88:[2,49],89:[2,49],90:[2,49],91:[2,49],92:[2,49],93:[2,49],95:[2,49],96:[2,49]},{11:[2,50],17:[2,50],32:[2,50],36:[2,50],43:[2,50],49:[2,50],70:[2,50],84:[2,50],86:[2,50],87:[2,50],88:[2,50],89:[2,50],90:[2,50],91:[2,50],92:[2,50],93:[2,50],95:[2,50],96:[2,50]},{11:[2,30],17:[2,30],19:[2,30],22:[2,30],27:[2,30],31:[2,30],32:[2,30],36:[2,30],43:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],53:[2,30],54:[2,30],55:[2,30],56:[2,30],70:[2,30],82:[2,30],84:[2,30],86:[2,30],87:[2,30],88:[2,30],89:[2,30],90:[2,30],91:[2,30],92:[2,30],93:[2,30],95:[2,30],96:[2,30]},{5:[2,17],7:[2,17],11:[2,17],16:[2,17],17:[2,17],36:[2,17],52:[2,17]},{16:[2,126],17:[2,126],25:180,36:[2,126],38:127,52:[2,126],82:[1,44]},{16:[2,76],17:[2,76],36:[2,76],52:[2,76],82:[2,76]},{16:[2,77],17:[2,77],36:[2,77],52:[2,77],82:[2,77]},{27:[1,181]},{19:[2,126],38:182,52:[2,126],82:[1,44]},{5:[2,73],7:[2,73],11:[2,73],16:[2,73],17:[2,73],36:[2,73],52:[2,73],82:[2,73]},{22:[2,60],32:[2,60],43:[2,60],49:[2,60],50:[2,60],51:[2,60],52:[2,60],62:[2,60]},{17:[1,183]},{22:[1,184]},{32:[1,105],43:[1,106],64:141,65:142,67:185,70:[1,140]},{32:[2,69],43:[2,69],70:[2,69]},{32:[2,70],43:[2,70],70:[2,70]},{32:[2,71],43:[2,71],70:[2,71]},{32:[2,72],43:[2,72],70:[2,72]},{7:[1,149],11:[2,29],17:[2,29],19:[2,29],22:[2,29],27:[2,29],31:[2,29],32:[2,29],35:186,36:[2,29],43:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],70:[2,29],82:[2,29],84:[2,29],86:[2,29],87:[2,29],88:[2,29],89:[2,29],90:[2,29],91:[2,29],92:[2,29],93:[2,29],95:[2,29],96:[2,29]},{22:[2,40]},{16:[2,74]},{16:[2,78],17:[2,78],36:[2,78],52:[2,78],82:[2,78]},{9:189,19:[1,188],52:[1,9],73:187},{7:[1,171],22:[2,62],32:[2,62],43:[2,62],49:[2,62],50:[2,62],51:[2,62],52:[2,62],62:[2,62],66:190},{22:[2,63],32:[2,63],43:[2,63],49:[2,63],50:[2,63],51:[2,63],52:[2,63],62:[2,63]},{22:[2,65],49:[1,175],50:[1,174],51:[1,177],52:[1,176],68:191,69:173},{11:[2,28],17:[2,28],19:[2,28],22:[2,28],27:[2,28],31:[2,28],32:[2,28],36:[2,28],43:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],55:[2,28],56:[2,28],70:[2,28],82:[2,28],84:[2,28],86:[2,28],87:[2,28],88:[2,28],89:[2,28],90:[2,28],91:[2,28],92:[2,28],93:[2,28],95:[2,28],96:[2,28]},{16:[2,79],17:[2,79],36:[2,79],52:[2,79],82:[2,79]},{11:[2,126],17:[2,126],32:[2,126],36:[2,126],38:192,43:[2,126],49:[2,126],70:[2,126],82:[1,44],84:[2,126],86:[2,126],87:[2,126],88:[2,126],89:[2,126],90:[2,126],91:[2,126],92:[2,126],93:[2,126],95:[2,126],96:[2,126]},{16:[2,81],17:[2,81],36:[2,81],52:[2,81],82:[2,81]},{22:[2,61],32:[2,61],43:[2,61],49:[2,61],50:[2,61],51:[2,61],52:[2,61],62:[2,61]},{22:[2,64]},{11:[1,41],13:80,17:[1,39],26:193,32:[1,84],34:79,36:[1,11],42:82,43:[1,85],46:75,49:[1,28],70:[1,29],78:76,79:77,80:78,83:83,84:[1,86],86:[1,81],87:[1,30],88:[1,31],89:[1,32],90:[1,33],91:[1,34],92:[1,35],93:[1,36],94:37,95:[1,38],96:[1,40]},{27:[1,194]},{16:[2,80],17:[2,80],36:[2,80],52:[2,80],82:[2,80]}],
defaultActions: {12:[2,1],20:[2,20],58:[2,82],60:[2,22],96:[2,23],119:[2,37],123:[2,98],124:[2,33],125:[2,34],130:[2,83],133:[2,51],134:[2,52],136:[2,57],137:[2,58],151:[2,39],179:[2,40],180:[2,74],191:[2,64]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};


function __() {
	var obj = arguments[0];
	for(var i=1; i<arguments.length; i++) {
		var arg = arguments[i];
		for(var e in arg) {
			obj[e] = arg[e];
		}
	}
	return obj;
}

function strip(str) {
	return str.substr(1, str.length-2);
}

function resolveVar(val, scope) {
	var node = scope;
	var names = val.varName;
	if(names.length === 1) {
		var name = names[0];
		do {
			if(node[name]) {
				return node[name];
			}
			node = node['^'];
		} while(node);
		// variable name not found in current scope
		console.error(name+' is undefined.');
		return '';
	}
	else {
		var candidate = undefined;
		var namesLen = names.length;

		// first, resolve the namespace address
		var name = names[namesLen-1];
		do {
			if(node[name]) {
				candidate = node[name];
				break;
			}
			node = node['^'];
		} while(node);

		// next, follow the variable down the scope tree
		for(i=namesLen-2; i>=0; i--) {
			if(typeof candidate === 'undefined') {
				return undefined;
			}
			candidate = candidate[names[i]];
		}

		// finally, return whatever we found
		return candidate;
	}
}


function resolveValue(val, scope) {
	var type = typeof val;
	if(type === 'string') {
		return val;
	}
	else if(type === 'number') {
		return val;
	}
	else if(type === 'object') {
		if(val.isStr) {
			return val;
		}
		else if(val.isVar) {
			return resolveVar(val, scope);
		}
		else if(val.isNsi) {
			console.log('# ',val);
			var names = val.varName;
			var nameLen = names.length;
			var node = resolveValue({
				isVar: true,
				varName: names[nameLen-1],
			}, scope);
			if(!node) return undefined;
			for(var i=nameLen-2; i>=0; i--) {
				var next = node[names[i]];
				if(!next) {
					return undefined;
				}
				node = next;
			}
			return node;
		}
		else if(val.join) {
			var expr = resolveExpr(val, scope);
			if(expr.isStr) return irks(expr.value);
			return expr.value;
		}
		else if(val.isCall) {
			var args = val.args;
			var isString = false;
			var expr = resolveExpr(args, scope);
			if(expr.isStr) expr.value = irks(expr.value);
			return val.method+expr.value+')';
		}
		else if(val.isBessCall) {
			return val;
		}
		else if(val.isArithmetic) {
			return resolveArithmetic(val.term, scope);
		}
	}
	return undefined;
}

function resolveArithmetic(term, scope) {

	var ra = resolveValue(term[2], scope);
	var a = parseFloat(ra);
	var au = /^[0-9\-\+\.]+(.*)/i.exec(ra);
	au = au? au[1]: '';

	var rb = resolveValue(term[0], scope);
	var b = parseFloat(rb);
	var bu = /^[0-9\-\+\.]+(.*)/i.exec(rb);
	bu = bu? bu[1]: '';

	var r;
	var ru;

	switch(term[1]) {
		case '-':
			r = a * b; break;
		case '+':
			r = a + b; break;
		case '*':
			r = a * b; break;
		case '/':
			r = a / b; break;
		case '^':
			r = a ^ b; break;
		case '%':
			r = a % b; break;
		case '|':
			r = a | b; break;
		case '&':
			r = a & b; break;
	}

	ru = au || bu;
	return r+''+ru;
}

function irks(str) {
	return "'"
		+str
			.replace(/\\(.)/g, function(a,b){return b;})
			.replace(/'/g,"\\'")
		+"'";
}
function dirks(str) {
	return '"'
		+str
			.replace(/\\(.)/g, function(a,b){return b;})
			.replace(/"/g,'\\"')
		+'"';
}

function resolveExpr(list, scope) {
	var b = [];
	var prevStr = true;
	var hasStr = false;

	// console.log(list);
	
	for(var i=list.length-1; i>=0; i--) {

		var value = resolveValue( list[i], scope );
		if(!value) {
			// undefined variable!
			console.log('\nunable to resolve: ',scope);
			console.error('\nvariable undefined: $'+list[i].varName.reverse().join('.'));
			process.exit(1);
		}
		
		else if(!value.isStr) {
			if(!prevStr) b.push(' ');
			prevStr = false;
		}
		else {
			value = value.value;
			prevStr = true;
			hasStr = true;
		}
		b.push(value);
	}
	
	return {
		isStr: hasStr,
		value: b.join(''),
	};
}


// resolves a css rule
function resolveRule(decl, scope, jsol, sheet, parentSelectors) {
	var name = decl.varName;

	// resolve this rule's selectors
	var selectors = resolveSelectors(decl.selectors, scope, jsol);

	// prepare to append sub rules
	var subs = null;

	// start off by creating the jsol object for this item
	if(name && jsol) {
		jsol[name] = {};
		subs = {};
	}

	// if this is a sub-rule
	if(parentSelectors) {
		var selectorSeparator = /^[a-zA-Z\*]/.test(selectors)? ' ': '';
		selectors = parentSelectors + selectorSeparator + selectors;
	}

	// for css and jsol respectively
	var rule = []; var assoc = {}; var hasSubRules = false;

	// iterate over all the css lines
	var lines = decl.css;
	for(var i=lines.length-1; i>=0; i--) {
		var line = lines[i];

		// this is an embedded rule
		if(line.isRule) {
			hasSubRules = true;
			resolveRule(line, scope, subs, sheet, selectors);
		}

		// otherwise, assume it is    property: value;
		else {
			var exprValue = resolveValue(line.value, scope);
			rule.push(line.prop+': '+exprValue+';');
			assoc[line.prop] = exprValue;
		}
	}

	// append the lines for this declaration's rule only
	sheet.push(
		selectors+' {\n\t'+rule.join('\n\t')+'\n}\n'
	);

	// if this obj has a name
	if(name) {
		// update the scope
		scope[name] = assoc;

		// if the jsol object is also not null
		if(jsol) {
			__(jsol[name], assoc);
			if(hasSubRules && subs) {
				jsol[name].$ = subs;
			}
		}
	}
}



function expandDeclaration(decl, scope, jsol, sheet) {

	var name = decl.varName;

	// plain bess assignment    varName: value;
	if(decl.isAssignment) {
		var b = resolveExpr(decl.gets, scope).value;
		scope[name] = b;

		// unlesss the assignment is transparent
		if(!decl.isTransparent) {
			// give it a jsol value
			jsol[name] = b;
		}
	}

	// ...?
	else if(decl.body) {
		var subScope = { '^': scope };
		var subJsol = {};
		var body = decl.body;
		var bodyLen = body.length;
		for(var i=bodyLen-1; i>=0; i--) {
			expandDeclaration( body[i], subScope, subJsol, sheet );
		}
		scope[name] = subScope;
		jsol[name] = subJsol;
	}

	//
	else if(decl.isFunction) {
		buildRuleFunction(decl, scope, jsol);
	}

	//
	else if(decl.isValueFunction) {
		buildValueFunction(decl, scope, jsol);
	}

	// dictionary definition    dict(key): value;
	else if(decl.isDictionary) {
		buildDictionary(decl, scope, jsol);
	}

	// css rule     / rule { ... }
	else if(decl.isRule) {
		resolveRule(decl, scope, jsol, sheet);
	}

	// unknown
	else {
		console.log('unable to id: ',decl);
	}
}

function buildDictionary(decl, scope, jsol) {
	var b = resolveExpr(decl.bess.gets, scope).value;
	var name = decl.varName;
	if(!scope[name]) scope[name] = {};
	node = scope[name];

	var args = decl.arguments;
	for(var i=args.length-1; i>=0; i--) {
		var arg = args[i].join(' ');
		if(i===0) node[arg] = b;
		else {
			if(!node[arg]) node[arg] = {};
			node = node[arg];
		}
	}

	jsol[name] = scope[name];
}


// takes an array of $-prefixed strings to form a lookup hash
function hashBessArguments(argList) {
	var lookup = {};
	var create = [];

	for(var i=argList.length-1; i>=0; i--) {
		var arg = argList[i];
		lookup[ arg.substr(1) ] = true;
		create.push(arg);
	}

	return {
		lookup: lookup,
		create: create,
	};
}



function buildValueFunction(decl, scope, jsol) {

	var args = hashBessArguments(decl.arguments);
	var argLookup = args.lookup;
	var createFunc = args.create;

	var name = decl.varName;
	var gets = decl.gets;
	var b = [];

	var c = [];
	var prevStr = true;
	var hasStr = false;

	for(var i=gets.length-1; i>=0; i--) {
		var tmp = gets[i];
		// console.log('looking for: ',tmp);
		if(argLookup[tmp.varName] || tmp.isBessCall) {
			if(c.length) {
				b.push({
					isStr: true,
					value: c.join('')
				});
			}
			c.length = 0;
			b.push(tmp);
			prevStr = false;
		}
		else {
			var r = resolveValue(tmp, scope), value;
			if(!r.isStr) {
				if(!prevStr) c.push(' ');
				prevStr = false;
			}
			else {
				r = r.value;
				prevStr = true;
			}
			c.push(r);
		}
	}


	if(c.length) {
		b.push({
			isStr: true,
			value: c.join('')
		});
	}

	var body = buildFunctionBody(b, scope);

	// console.log('**** => ',body);
	createFunc.push(body);
	jsol[name] = scope[name] = Function.apply(global, createFunc);
}


function buildRuleFunction(decl, scope, jsol) {
	var args = hashBessArguments(decl.arguments);
	var argLookup = args.lookup;
	var createFunc = args.create;

	var name = decl.varName;
	var args = decl.arguments;

	var a = [];
	var b = [];
	var s = [];

	var prevStr = true;
	var hasStr = false;
	var css = '';

	for(var i=decl.length-1; i>=0; i--) {
		var line = decl[i];
		s.push(line.prop+': ');

		var expr = line.value;
		for(var j=expr.length-1; j>=0; j--) {
			var value = expr[j];
			if(value.isVar) {
				var varName = value.varName.join('.');
				if(argLookup[varName] || value.isBessCall) {
					if(s.length) {
						a.push({
							isStr: true,
							value: s.join(''),
						});
					}
					s.length = 0;
					a.push(value);
					prevStr = false;
				}
				else {
					console.log('!!',value);
					// resolveVar(value, scope);
				}
			}
			else {
				var r = resolveValue(value, scope);
				if(!r.isStr) {
					if(!prevStr) s.push(' ');
					prevStr = false;
				}
				else {
					r = r.value;
					prevStr = true;
				}
				a.push(r);
			}
		}	

		if(s.length) {
			a.push({
				isStr: true,
				value: s.join(''),
			});
		}
		b.push(a);
		a = [];
	}

	var retline = [];
	for(var i=0; i<b.length; i++) {
		var subline = [];
		var bi = b[i];
		for(var j=0; j<bi.length; j++) {
			var bij = bi[j];
			
			if(bij.isStr) {
				subline.push(
					irks(bij.value)
				);
			}
			else if(bij.isVar) {
				subline.push(
					'$'+bij.varName.join('.')
				);
			}
		}
		retline.push(subline.join('+'));
	}
	console.log('['+retline.join(',')+']');

	// console.log(buildFunctionBody(b, scope));
}



function buildFunctionBody(b, scope) {
	var retline = [];
	for(var i=0; i<b.length; i++) {
		var bi = b[i];
		if(bi.isStr) {
			retline.push(
				irks( bi.value )
			);
		}
		else if(bi.isVar) {
			retline.push(
				'$'+bi.varName.join('.')
			);
		}
		else if(bi.isBessCall) {
			var bnode = resolveValue({
					isVar: true,
					varName: bi.method,
				}, scope);
			var bargs = bi.args;
			for(var j=bargs.length-1; j>=0; j--) {
				// grab the first element in the var name array
				var barg = bargs[j];
				if(argLookup[barg.varName]) {

				}
				// if(bnode.hasOwnProperty(bargName)) {
				// 	bnode = bnode[bargName];
				// }
			}
			// console.log('bnode: ',bnode);
			retline.push(
				'this('+JSOL.stringify(bi)+')' // TODO: replace with proper method call (inspect bi: {method, args} )
			);
		}
	}

	return 'return '+retline.join('+')+';';
}



function resolveSelectorTarget(trgt, scope) {
	var val = resolveValue(trgt, scope);
	// console.log('** resolving selecor target: ',trgt,' => ',expr);
	return val.isStr? dirks(val.value): val;
}

function resolveSelectors(sels, scope, jsol) {
	var css = '';
	
	for(var i=sels.length-1; i>=0; i--) {
		var chunk = sels[i];
		if(typeof chunk === 'string') {
			css += chunk;
		}
		else {
			css += resolveSelectorTarget(chunk, scope);
		}
	}

	return css;
}




/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: 
break;
case 1: 
break;
case 2: return 11; 
break;
case 3: return 17; 
break;
case 4:
		this.begin('bess');
		return yy_.yytext;
	
break;
case 5: this.begin('selector'); return yy_.yytext; 
break;
case 6: this.popState(); return yy_.yytext; 
break;
case 7: this.popState(); return yy_.yytext; 
break;
case 8: this.popState(); this.begin('css'); return yy_.yytext; 
break;
case 9: this.begin('embess'); return yy_.yytext; 
break;
case 10: return 61; 
break;
case 11: return 60; 
break;
case 12: return 82; 
break;
case 13: this.popState(); return yy_.yytext; 
break;
case 14: return 11; 
break;
case 15: return 17; 
break;
case 16: return 70; 
break;
case 17: this.popState(); return yy_.yytext; 
break;
case 18: return 82; 
break;
case 19: return 95; 
break;
case 20: return 'BAD_STRING'; 
break;
case 21: return 86; 
break;
case 22: return 11; 
break;
case 23: return 17; 
break;
case 24: return 84; 
break;
case 25: return 89; 
break;
case 26: return 90; 
break;
case 27: return 88; 
break;
case 28: return 88; 
break;
case 29: return 88; 
break;
case 30: return 88; 
break;
case 31: return 88; 
break;
case 32: return 88; 
break;
case 33: return 91; 
break;
case 34: return 91; 
break;
case 35: return 91; 
break;
case 36: return 92; 
break;
case 37: return 92; 
break;
case 38: return 93; 
break;
case 39: return 93; 
break;
case 40: return 'DIMENSION'; 
break;
case 41: return 87; 
break;
case 42: return 70; 
break;
case 43: this.begin('math'); return yy_.yytext; 
break;
case 44: this.popState(); return yy_.yytext; 
break;
case 45: return 96; 
break;
case 46: return 17; 
break;
case 47: 
break;
case 48: return yy_.yytext; 
break;
case 49: return 5; 
break;
}
};
lexer.rules = [/^(?:(\/\*[^*]*\*+([^/*][^*]*\*+)*\/))/,/^(?:([ \t\r\n]+))/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?::)/,/^(?:\/)/,/^(?:\{)/,/^(?:;)/,/^(?:\{)/,/^(?:`)/,/^(?:\$([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:([\$]?[^{\$ \r\n\t]+))/,/^(?:([ \t\r\n]+))/,/^(?:`)/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:{number})/,/^(?:\})/,/^(?:([ \t\r\n]+))/,/^(?:(("([^\n\r\\"]|\\(\n|\r\n|\r\b)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*")|('([^\n\r\\']|\\(\n|\r\n|\r\b)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*')))/,/^(?:(("([^\n\r\\"]|\\(\n|\r\n|\r\b)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*\\?)|('([^\n\r\\']|\\(\n|\r\n|\r\b)|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*\\?)))/,/^(?:`([^`]*)`)/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*)\()/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:!((([ \t\r\n]+)?)|(\/\*[^*]*\*+([^/*][^*]*\*+)*\/))*([iI])([mM])([pP])([oO])([rR])([tT])([aA])([nN])([tT]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([eE])([mM]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([eE])([xX]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([pP])([xX]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([cC])([mM]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([mM])([mM]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([iI])([nN]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([pP])([tT]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([pP])([cC]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([dD])([eE])([gG]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([rR])([aA])([dD]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([gG])([rR])([aA])([dD]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([mM])([sS]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([sS]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([hH])([zZ]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([kK])([hH])([zZ]))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*))%)/,/^(?:(([\.][0-9]+)|([0-9]+[\.]?[0-9]*)))/,/^(?:\()/,/^(?:\))/,/^(?:#([0-9a-fA-F])+)/,/^(?:([-]?([_a-zA-Z]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))([_a-zA-Z0-9-]|([\240-\377])|((\\([0-9a-fA-F]){1,6}(\r\n|[ \t\r\n])?)|\\[^\r\n0-9a-fA-F]))*))/,/^(?:([ \t\r\n]+))/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"bess":{"rules":[0,1,6,7,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49],"inclusive":true},"selector":{"rules":[0,8,9,10,11,12,40,48,49],"inclusive":true},"embess":{"rules":[0,1,13,14,15,16,48,49],"inclusive":true},"css":{"rules":[0,5,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49],"inclusive":true},"math":{"rules":[0,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,48,49],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = bess;
exports.Parser = bess.Parser;
exports.parse = function () { return bess.parse.apply(bess, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}